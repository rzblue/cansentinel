name: CI

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build
      run: cargo build --verbose --release

  build-cross-platform:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
    
    - name: Build for ${{ matrix.target }}
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cansentinel-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/cansentinel
        if-no-files-found: error

  package-systemcore:
    name: Package IPK for Systemcore
    runs-on: ubuntu-latest
    steps:
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-unknown-linux-gnu
    
    - name: Install cross-compilation tools
      run: |
        curl -fsSL https://github.com/LimelightVision/systemcore-os-public/releases/download/Limelight_SYSTEMCORE-169/systemcore-aarch64-toolchain.tar.gz | tar -xzf - -C /opt
        cd /opt/systemcore-aarch64-toolchain && ./relocate-sdk.sh

    - name: Install opkg-utils
      run: |
        git clone https://git.yoctoproject.org/opkg-utils
        cd opkg-utils
        git checkout d179a334f7bfbe55dec4839607dac2c38f6b7c8f
        sudo make install
        cd ../
        rm -rf opkg-utils

    - uses: actions/checkout@v4

    - name: Build IPK for Systemcore
      run: fakeroot opkg-buildpackage
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: /opt/systemcore-aarch64-toolchain/bin/aarch64-buildroot-linux-gnu-gcc
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: systemcore-ipk
        path: /home/runner/work/cansentinel/cansentinel_*_aarch64.ipk
        if-no-files-found: error
